var parse = JSON.parse,
       stringify = JSON.stringify,
       sqrt = Math.sqrt,
       min = Math.min,
       max = Math.max,
       touch_default = {
              last: [],
              current: []
       }

function init(initData, empty, target_ins, instance) {
       if (!initData) return
       var state = target_ins.getState()
       state.initData = initData
       state.touch = deepCopy(touch_default)
       state.bcr = []
       state.img_inited = true
       state.rotation = 0
       state.transform = [0, 0, 1, 0]
       state.end_trans = [0, 0, 1, 0]
       animate(target_ins, state.transform)
       getFitSize(target_ins)
       state.theme = [0, ["", "#000", "#fff"]]
       var sys = initData.sys
       state.center = [sys.windowWidth / 2, sys.windowHeight / 2]
       state.hd_before = {}
       state.hd_after = {
              transform: "scale(0.8)",
              opacity: 0,
              visibility: "hidden"
       }
}

function deepCopy(e) {
       return parse(stringify(e));
}

function onCrop(e, target_ins) {
       var state = target_ins.getState()
       state.offtouch_time = 0
       animate(target_ins, state.end_trans)
       var bcr = target_ins.selectComponent('#crop_img').getBoundingClientRect()
       crop = stringify(state._trans) != stringify(state.end_trans)
       state._trans = deepCopy(state.end_trans)
       target_ins.callMethod("getCroppedImg", {
              crop: crop,
              type: e.target.id,
              top: bcr.top,
              left: bcr.left,
              height: bcr.height,
              width: bcr.width,
              scale: state._trans[2],
              rotation: state._trans[3]
       })
}

function animate(target_ins, transform) {
       target_ins.selectComponent('#crop_img').setStyle({
              'transform': 'translate(' + transform[0] + 'px,' + transform[1] + 'px) scale(' + transform[2] + ') rotate(' + transform[3] + 'deg)'
       })
}

function setRotation(e, target_ins) {
       var state = target_ins.getState()
       state.offtouch_time = 0
       state.rotation = (state.rotation + 90) % 360
       state.end_trans = [0, 0, 1, state.rotation]
       state.transform = [0, 0, 1, state.rotation]
       animate(target_ins, state.transform)
       getFitSize(target_ins)
}

function getFitSize(target_ins) {
       var bcr = target_ins.selectComponent('#crop_img').getBoundingClientRect()
       target_ins.getState().fit_size = [bcr.width, bcr.height]
}

function cropTouch(e, target_ins) {
       var state = target_ins.getState()
       if (!state.img_inited) {
              return false
       }
       var changes = e.changedTouches,
              type = e.type,
              center = state.center,
              last = state.touch.last,
              current = state.touch.current,
              len = current.length,
              cl = changes.length,
              fit_size = state.fit_size,
              list = [],
              size = min(fit_size[0], fit_size[1]);
       for (var i = 0; i < len; i++) {
              list.push(current[i].identifier)
       }
       if (type === "touchstart") {
              if (len === 0) {
                     state.offtouch_time = 0
                     target_ins.clearTimeout(state.timer);
                     target_ins.selectComponent('.crop-head').setStyle(state.hd_after)
              }
              for (var i = 0; i < cl; i++) {
                     current.push(changes[i])
              }
       } else if (type === "touchmove") {
              var transform = state.transform
              last = deepCopy(current)
              for (var i = 0; i < cl; i++) {
                     var idx = list.indexOf(changes[i].identifier)
                     current[idx] = changes[i]
              }
              if (len === 2) {
                     var x1 = last[0].pageX,
                            x2 = last[1].pageX,
                            x3 = current[0].pageX,
                            x4 = current[1].pageX,
                            y1 = last[0].pageY,
                            y2 = last[1].pageY,
                            y3 = current[0].pageY,
                            y4 = current[1].pageY,
                            ax = (x1 + x2) / 2,
                            ay = (y1 + y2) / 2,
                            bx = (x3 + x4) / 2,
                            by = (y3 + y4) / 2,
                            cx = x2 - x1,
                            cy = y2 - y1,
                            dx = x4 - x3,
                            dy = y4 - y3,
                            origin = [bx, by],
                            max_l = 0.4 * size,
                            min_scale = size / max(fit_size[0], fit_size[1]),
                            max_scale = state.initData.maxScale,
                            scale = max(sqrt(dx * dx + dy * dy), max_l) / max(sqrt(cx * cx + cy * cy), max_l)
                     var before = transform[2],
                            after = before * scale
                     transform[2] = max(min_scale, min(after, max_scale))
                     var scale = transform[2] / before
                     transform[0] += bx - ax + (center[0] + transform[0] - origin[0]) * (scale - 1)
                     transform[1] += by - ay + (center[1] + transform[1] - origin[1]) * (scale - 1)
              } else {
                     var _x = 0,
                            _y = 0;
                     for (var i = 0; i < cl; i++) {
                            _x += current[i].pageX - last[i].pageX
                            _y += current[i].pageY - last[i].pageY
                     }
                     _x /= len, _y /= len;
                     transform[0] += _x
                     transform[1] += _y
              }
              animate(target_ins, transform)
       } else {
              if (len === cl || type === "touchcancel") {
                     var trans = deepCopy(state.transform)
                     if (trans[2] < 1) {
                            state.end_trans = [0, 0, 1, trans[3]]
                     } else {
                            state.end_trans[2] = trans[2]
                            for (var i = 0; i < 2; i++) {
                                   var _size = (state.end_trans[2] * fit_size[i] - size) / 2
                                   state.end_trans[i] = max(-_size, min(_size, trans[i]))
                            }
                     }
                     state.touch = deepCopy(touch_default)

                     function render() {
                            if (state.offtouch_time === offtouch_time) {
                                   var time = getDate().getTime() - offtouch_time,
                                          st = min(time / 200, 1)
                                   for (var i = 0; i < 4; i++) {
                                          state.transform[i] = trans[i] + st * (state.end_trans[i] - trans[i])
                                   }
                                   animate(target_ins, state.transform)
                                   if (time <= 200) {
                                          target_ins.requestAnimationFrame(render)
                                   }
                            }
                     }
                     state.timer = target_ins.setTimeout(function () {
                            target_ins.selectComponent('.crop-head').setStyle(state.hd_before)
                     }, 300)
                     state.offtouch_time = getDate().getTime()
                     var offtouch_time = state.offtouch_time
                     target_ins.requestAnimationFrame(render)
              } else {
                     for (var i = 0; i < cl; i++) {
                            var idx = list.indexOf(changes[i].identifier) - i
                            current.splice(idx, 1);
                     }
              }

       }

}

function setTheme(e, target_ins) {
       var theme = target_ins.getState().theme
       theme[0] = (theme[0] + 1) % 3
       var item = theme[1][theme[0]]
       target_ins.selectComponent(".crop-body").setStyle({
              background: item
       })
}
module.exports = {
       init: init,
       cropTouch: cropTouch,
       onCrop: onCrop,
       setTheme: setTheme,
       setRotation: setRotation
}